// =========================
// üîß ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Firebase & Cloudinary
// =========================

// --- ‚ÄºÔ∏è ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‚ÄºÔ∏è ---
const firebaseConfig = {
  apiKey: "AIzaSyCad3vMEdmWQUcUDJA6BHYD6AZruzgqom4",
  authDomain: "testdirt-58ba4.firebaseapp.com",
  projectId: "testdirt-58ba4",
  storageBucket: "testdirt-58ba4.firebasestorage.app",
  messagingSenderId: "89792009820",
  appId: "1:89792009820:web:86ff41e9d3211f00997899"
};

const CLOUDINARY_URL = "https://api.cloudinary.com/v1_1/dfix1lo9q/image/upload";
const CLOUDINARY_UPLOAD_PRESET = "soil_test_uploads";

// --- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase ---
firebase.initializeApp(firebaseConfig);
const db = firebase.firestore();


// =========================
// üìé ‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö (‡∏†‡∏≤‡∏û/‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠)
// =========================

// ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏∞‡∏™‡∏°‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á
const selectedFiles = [];
const selectedFileKeys = new Set();
function addToSelectedFiles(fileList){
  Array.from(fileList || []).forEach(f => {
    const key = `${f.name}|${f.size}|${f.lastModified}`;
    if (!selectedFileKeys.has(key)) {
      selectedFileKeys.add(key);
      selectedFiles.push(f);
    }
  });
}

function createFileInput() {
  const row = document.createElement("div");
  row.classList.add("file-row");

  const input = document.createElement("input");
  input.type = "file";
  input.name = "mediaFiles[]";
  input.accept = ".jpg,.jpeg,.png";
  input.multiple = true;
  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå ‡πÉ‡∏´‡πâ‡∏™‡∏∞‡∏™‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏ß‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
  input.addEventListener("change", () => {
    addToSelectedFiles(input.files);
    // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô input ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°‡∏≠‡∏µ‡∏Å‡∏£‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÅ‡∏•‡∏∞‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    input.value = "";
  });

  const removeBtn = document.createElement("button");
  removeBtn.type = "button";
  removeBtn.textContent = "‡∏•‡∏ö";
  removeBtn.classList.add("remove-btn");
  removeBtn.addEventListener("click", () => row.remove());

  row.appendChild(input);
  row.appendChild(removeBtn);
  return row;
}

document.getElementById("addFileBtn").addEventListener("click", () => {
  document.getElementById("fileInputs").appendChild(createFileInput());
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏° input ‡πÅ‡∏£‡∏Å‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≠‡∏ö‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°
(function ensureInitialFileInput(){
  const wrap = document.getElementById("fileInputs");
  if (wrap && !wrap.querySelector("input[type='file']")) {
    wrap.appendChild(createFileInput());
  }
})();

// =========================
/*  üßæ Submit Form:
    1) ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ Cloudinary
    2) ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
    3) ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Firestore
*/
// =========================

document.getElementById("soilForm").addEventListener("submit", async function (e) {
  e.preventDefault();
  const saveBtn = e.target.querySelector(".btn-save");
  saveBtn.disabled = true;
  saveBtn.textContent = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå...";

  try {
    // --- 1) ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏∂‡πâ‡∏ô Cloudinary ---
    // ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏™‡∏°‡πÑ‡∏ß‡πâ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ fallback ‡πÑ‡∏õ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å input ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    let filesToUpload = selectedFiles.slice();
    if (filesToUpload.length === 0) {
      const fileInputs = document.querySelectorAll("input[name='mediaFiles[]']");
      fileInputs.forEach(input => Array.from(input.files || []).forEach(file => filesToUpload.push(file)));
    }

    const uploadPromises = filesToUpload.map(file => {
      const formData = new FormData();
      formData.append("file", file);
      formData.append("upload_preset", CLOUDINARY_UPLOAD_PRESET);
      return fetch(CLOUDINARY_URL, { method: "POST", body: formData }).then(res => res.json());
    });

    const uploadedResponses = await Promise.all(uploadPromises);
    const fileURLs = uploadedResponses
      .filter(res => res && res.secure_url)
      .map(res => res.secure_url);

    saveBtn.textContent = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...";

    // --- 2) ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏° (‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å ID ‡∏ó‡∏µ‡πà‡∏°‡∏µ) ---
    const value = id => {
      const el = document.getElementById(id);
      return el ? (el.value ?? '') : '';
    };

    const num = id => {
      const v = value(id);
      if (v === '' || v === null || v === undefined) return null;
      const parsed = Number(v);
      if (isNaN(parsed)) return null;
      const positiveOnlyFields = ['age', 'coffee_experience', 'planting_area', 'fertilizer_frequency', 
                                 'fertilizer_amount', 'yield_per_tree', 'fertilizer_cost', 'labor_cost', 
                                 'other_costs', 'coffee_height', 'coffee_circumference'];
      if (positiveOnlyFields.includes(id) && parsed < 0) {
        return null;
      }
      return parsed;
    };

    const formDataForFirebase = {
      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏õ‡∏•‡∏á
      mountain: value("mountain"),
      plot_number: value("plot_number"),

      // ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£
      farmer_name: value("farmer_name"),
      age: num("age"),
      coffee_experience: num("coffee_experience"),
      planting_area: num("planting_area"),
      address: value("address"),
      gps_coordinates: value("gps_coordinates"),
      water_system: value("water_system"),
      fertilizer_type: value("fertilizer_type"),
      fertilizer_formula: value("fertilizer_formula"),
      fertilizer_frequency: num("fertilizer_frequency"),
      fertilizer_amount: num("fertilizer_amount"),
      soil_problems: value("soil_problems"),
      yield_problems: value("yield_problems"),
      internet_access: value("internet_access"),
      yield_per_tree: num("yield_per_tree"),
      cupping_experience: value("cupping_experience"),
      fertilizer_cost: num("fertilizer_cost"),
      labor_cost: num("labor_cost"),
      other_costs: num("other_costs"),

      // ‡∏ß‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡∏î‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö‡∏û‡∏Å‡∏û‡∏≤
      n_portable: num("n_portable"),
      ph_portable: num("ph_portable"),
      p_portable: num("p_portable"),
      om_portable: num("om_portable"),
      k_portable: num("k_portable"),
      moisture_portable: num("moisture_portable"),
      ec_portable: num("ec_portable"),
      temp_portable: num("temp_portable"),

      // ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï
      coffee_height: num("coffee_height"),
      coffee_circumference: num("coffee_circumference"),
      flowering: value("flowering"),
      fruiting: value("fruiting"),
      disease_problem: value("disease_problem"),
      insect_problem: value("insect_problem"),
      worm_problem: value("worm_problem"),

      // ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö
      files: fileURLs,

      // ‡πÄ‡∏°‡∏ï‡∏≤
      createdAt: new Date()
    };

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    const validationErrors = validateFormData(formDataForFirebase);
    if (validationErrors.length > 0) {
      alert('‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:\n' + validationErrors.join('\n'));
      saveBtn.disabled = false;
      saveBtn.textContent = "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
      return;
    }

    // --- 3) ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Firestore ---
    // ‡∏´‡∏ô‡πâ‡∏≤‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
    await db.collection("soil_tests_new").add(formDataForFirebase);
    
    alert("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!");
    window.location.href = "index.html";
  } catch (error) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
    
    // ‡πÅ‡∏™‡∏î‡∏á error ‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
    let errorMessage = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ";
    if (error.code) {
      errorMessage += `\n‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.code}`;
    }
    if (error.message) {
      errorMessage += `\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${error.message}`;
    }
    
    alert(errorMessage);
  } finally {
    saveBtn.disabled = false;
    saveBtn.textContent = "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
  }
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
function validateFormData(data) {
  const errors = [];
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏ö
  const positiveFields = {
    'age': '‡∏≠‡∏≤‡∏¢‡∏∏',
    'coffee_experience': '‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏õ‡∏•‡∏π‡∏Å‡∏Å‡∏≤‡πÅ‡∏ü',
    'planting_area': '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏≤‡∏∞‡∏õ‡∏•‡∏π‡∏Å',
    'fertilizer_cost': '‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏õ‡∏∏‡πã‡∏¢',
    'labor_cost': '‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô',
    'other_costs': '‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏≠‡∏∑‡πà‡∏ô‡πÜ',
    'coffee_height': '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏ï‡πâ‡∏ô',
    'coffee_circumference': '‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏≠‡∏ö‡∏ß‡∏á'
  };
  
  Object.keys(positiveFields).forEach(field => {
    if (data[field] !== null && data[field] < 0) {
      errors.push(`${positiveFields[field]} ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏•‡∏ö`);
    }
  });
  
  return errors;
}


// =========================
// üß≠ Google Map + Geolocation
// =========================

let map;
let marker;
const defaultPosition = { lat: 19.0333, lng: 99.8333 }; // ‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡πÑ‡∏ó‡∏¢ (‡∏™‡∏≥‡∏£‡∏≠‡∏á)

function initMap(startPosOverride) {
  const gpsInput = document.getElementById('gps_coordinates');
  const existingCoords = gpsInput.value.split(',').map(Number);

  const startPosition =
    startPosOverride
      ? startPosOverride
      : (existingCoords.length === 2 && !isNaN(existingCoords[0]) && !isNaN(existingCoords[1]))
        ? { lat: existingCoords[0], lng: existingCoords[1] }
        : defaultPosition;

  map = new google.maps.Map(document.getElementById("map"), {
    zoom: 13,
    center: startPosition,
  });

  marker = new google.maps.Marker({
    position: startPosition,
    map: map,
    draggable: true
  });

  map.addListener("click", (e) => {
    marker.setPosition(e.latLng);
  });
}

// ‡πÉ‡∏´‡πâ callback=initMap ‡πÉ‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå Google Maps ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏à‡∏≠
window.initMap = initMap;

// ‡∏ï‡∏£‡∏ß‡∏à permission ‡∏Ç‡∏≠‡∏á geolocation (‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ ‡∏à‡∏∞‡πÑ‡∏î‡πâ 'granted' | 'prompt' | 'denied')
const ensureGeoPermission = async () => {
  try {
    if (!('permissions' in navigator) || !('geolocation' in navigator)) return 'unsupported';
    const status = await navigator.permissions.query({ name: 'geolocation' });
    return status.state;
  } catch {
    return 'unknown';
  }
};

const showGeoHint = (state) => {
  const hintId = 'geo-hint';
  let hint = document.getElementById(hintId);
  if (!hint) {
    hint = document.createElement('div');
    hint.id = hintId;
    hint.style.margin = '0 0 10px';
    hint.style.color = '#5a4a37';
    hint.style.fontSize = '0.95rem';
    const modalContent = document.querySelector('#mapModal .modal-content');
    if (modalContent) modalContent.prepend(hint);
  }
  if (state === 'denied') {
    hint.innerHTML = '‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏õ‡∏¥‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏ß‡πâ ‚Äî ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏∏‡∏ç‡πÅ‡∏à‡∏ö‡∏ô‡πÅ‡∏ñ‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà ‚Üí Site settings ‚Üí Location: <b>Allow</b> ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤';
  } else if (state === 'unsupported') {
    hint.textContent = '‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö geolocation ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ô‡∏ö‡∏ô HTTPS/localhost';
  } else if (state === 'unknown') {
    hint.textContent = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ (‡∏≠‡∏≤‡∏à‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå)';
  } else {
    hint.textContent = '';
  }
};


// =========================
// üß© UI: Modal ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà + ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏õ‡∏•‡∏á + ‡∏õ‡∏±‡∏Å‡∏´‡∏°‡∏∏‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô + auto-format ‡∏õ‡∏∏‡πã‡∏¢
// =========================

document.addEventListener('DOMContentLoaded', function() {
  // --- ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Modal ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà ---
  const modal = document.getElementById('mapModal');
  const mapBtn = document.getElementById('mapBtn');
  const closeBtn = document.querySelector('.close-btn');
  const confirmBtn = document.getElementById('confirmLocationBtn');
  const gpsInput = document.getElementById('gps_coordinates');
  const locateMeBtn = document.getElementById('locateMeBtn'); // ‡∏õ‡∏∏‡πà‡∏° üìç ‡∏õ‡∏±‡∏Å‡∏´‡∏°‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

  // --- ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà ---
  mapBtn.onclick = async function() {
    modal.style.display = "block";

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ permission ‡πÅ‡∏•‡πâ‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    const state = await ensureGeoPermission();
    showGeoHint(state);

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ç‡∏≠‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÅ‡∏•‡πâ‡∏ß init/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
    const startWithGeo = () => {
      if (!navigator.geolocation) {
        if (!map) initMap();
        return;
      }
      const options = { enableHighAccuracy: false, timeout: 8000, maximumAge: 300000 };
      navigator.geolocation.getCurrentPosition(
        (pos) => {
          const current = { lat: pos.coords.latitude, lng: pos.coords.longitude };
          if (map) {
            map.setCenter(current);
            marker.setPosition(current);
          } else {
            initMap(current);
          }
        },
        (_err) => {
          // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò/‡∏´‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‚Üí fallback ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
          showGeoHint('denied');
          if (!map) initMap();
        },
        options
      );
    };

    // ‡∏ñ‡πâ‡∏≤ Google Maps ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢ geolocation
    if (typeof google === 'object' && typeof google.maps === 'object') {
      if (!map) startWithGeo();
      else google.maps.event.trigger(map, "resize");
    } else {
      // ‡∏£‡∏≠‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
      setTimeout(() => {
        if (!map && typeof google === 'object' && typeof google.maps === 'object') {
          startWithGeo();
        }
      }, 300);
    }
  };

  // --- ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏±‡∏Å‡∏´‡∏°‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ---
  if (locateMeBtn) {
    locateMeBtn.onclick = function() {
      if (!navigator.geolocation) {
        alert("‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á");
        return;
      }
      locateMeBtn.textContent = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á...";
      locateMeBtn.disabled = true;

      navigator.geolocation.getCurrentPosition(
        (pos) => {
          const current = { lat: pos.coords.latitude, lng: pos.coords.longitude };
          if (map && marker) {
            map.setCenter(current);
            marker.setPosition(current);
          } else if (typeof google === 'object' && typeof google.maps === 'object') {
            initMap(current);
          }
          locateMeBtn.textContent = "üìç ‡∏õ‡∏±‡∏Å‡∏´‡∏°‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô";
          locateMeBtn.disabled = false;
        },
        (err) => {
          alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ: " + err.message);
          locateMeBtn.textContent = "üìç ‡∏õ‡∏±‡∏Å‡∏´‡∏°‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô";
          locateMeBtn.disabled = false;
        },
        { enableHighAccuracy: true, timeout: 8000, maximumAge: 300000 }
      );
    };
  }

  // --- ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏û‡∏¥‡∏Å‡∏±‡∏î ---
  confirmBtn.onclick = function() {
    if (!marker) return;
    const currentPos = marker.getPosition();
    gpsInput.value = `${currentPos.lat().toFixed(6)}, ${currentPos.lng().toFixed(6)}`;
    modal.style.display = "none";
  };

  // --- ‡∏õ‡∏¥‡∏î modal ---
  closeBtn.onclick = function() {
    modal.style.display = "none";
  };
  window.onclick = function(event) {
    if (event.target == modal) {
      modal.style.display = "none";
    }
  };

  // --- ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç" ‡∏ï‡∏≤‡∏°‡∏î‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ---
  const mountainSelect = document.getElementById('mountain');
  const plotSelect = document.getElementById('plot_number');

  mountainSelect.addEventListener('change', function() {
    plotSelect.innerHTML = '<option value="" disabled selected>-- ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏õ‡∏•‡∏á --</option>';
    const selectedMountain = this.value;

    if (selectedMountain === '‡∏î‡∏≠‡∏¢‡∏ä‡πâ‡∏≤‡∏á') {
      for (let i = 1; i <= 50; i++) {
        const option = document.createElement('option');
        option.value = `DC${i}`;
        option.textContent = `DC${i}`;
        plotSelect.appendChild(option);
      }
    } else if (selectedMountain === '‡∏î‡∏≠‡∏¢‡πÅ‡∏°‡πà‡∏™‡∏•‡∏≠‡∏á') {
      for (let i = 1; i <= 50; i++) {
        const option = document.createElement('option');
        option.value = `MSL${i}`;
        option.textContent = `MSL${i}`;
        plotSelect.appendChild(option);
      }
    }
  });

  // --- Auto-format: ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏õ‡∏∏‡πã‡∏¢‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà (‡πÄ‡∏ä‡πà‡∏ô 15-15-15) ---
  const fertInput = document.getElementById('fertilizer_formula');
  if (fertInput) {
    fertInput.addEventListener('input', function() {
      let val = this.value.replace(/[^0-9]/g, ''); // ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
      if (val.length > 1 && val.length <= 3) {
        val = val.slice(0, 2) + '-' + val.slice(2);
      } else if (val.length > 3 && val.length <= 5) {
        val = val.slice(0, 2) + '-' + val.slice(2, 4) + '-' + val.slice(4);
      } else if (val.length > 5) {
        val = val.slice(0, 2) + '-' + val.slice(2, 4) + '-' + val.slice(4, 6);
      }
      this.value = val;
    });

    // ‡∏Å‡∏±‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏Å‡∏¥‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 15-15-15
    fertInput.addEventListener('keypress', function(e) {
      const raw = this.value.replace(/[^0-9]/g, '');
      if (raw.length >= 6 && /[0-9]/.test(e.key)) {
        e.preventDefault();
      }
    });

    // ‡∏ß‡∏≤‡∏á (paste) ‡∏Å‡πá‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    fertInput.addEventListener('paste', (e) => {
      e.preventDefault();
      const text = (e.clipboardData || window.clipboardData).getData('text');
      const digits = (text || '').replace(/[^0-9]/g, '').slice(0, 6);
      let val = digits;
      if (val.length > 2 && val.length <= 4) {
        val = val.slice(0, 2) + '-' + val.slice(2);
      } else if (val.length > 4) {
        val = val.slice(0, 2) + '-' + val.slice(2, 4) + '-' + val.slice(4);
      }
      fertInput.value = val;
    });
  }
});

// ---------- Prefill "‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£" ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏î‡∏≠‡∏¢ + ‡πÅ‡∏õ‡∏•‡∏á ----------
function setVal(id, v){ 
  const el = document.getElementById(id);
  if(!el) return;
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Å‡∏£‡∏≠‡∏Å
  let valueToSet = v ?? '';
  
  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏•‡∏ö‡πÉ‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏ï‡∏¥‡∏î‡∏•‡∏ö
  if (typeof v === 'number' && !isNaN(v)) {
    const positiveOnlyFields = ['age', 'coffee_experience', 'planting_area', 'fertilizer_frequency', 
                               'fertilizer_amount', 'yield_per_tree', 'fertilizer_cost', 'labor_cost', 
                               'other_costs', 'coffee_height', 'coffee_circumference'];
    
    if (positiveOnlyFields.includes(id) && v < 0) {
      valueToSet = ''; // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏•‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
    } else {
      valueToSet = v.toString();
    }
  }
  
  if (el.tagName === 'SELECT') {
    el.value = valueToSet;
  } else {
    el.value = valueToSet;
  }
}

async function prefillFarmerSection() {
  const mountain = document.getElementById('mountain').value;
  const plot = document.getElementById('plot_number').value;
  if (!mountain || !plot) {
    clearFormFields(); // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    return;
  }

  // helper: fallback query ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ orderBy (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ index)
  const fallbackQuery = async () => {
    const fb = await db.collection('soil_tests_new')
      .where('mountain','==', mountain)
      .where('plot_number','==', plot)
      .get();
    const docs = [];
    fb.forEach(d => docs.push({id:d.id, ...d.data()}));
    if (!docs.length) return null;
    // sort ‡πÄ‡∏≠‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏™‡∏∏‡∏î‡πÄ‡∏≠‡∏á
    docs.sort((a,b)=>{
      const ta = a.createdAt?.seconds ? a.createdAt.seconds*1000 : (a.createdAt ? new Date(a.createdAt).getTime() : 0);
      const tb = b.createdAt?.seconds ? b.createdAt.seconds*1000 : (b.createdAt ? new Date(b.createdAt).getTime() : 0);
      return tb - ta;
    });
    return docs[0];
  };

  try {
    const snap = await db.collection('soil_tests_new')
      .where('mountain','==', mountain)
      .where('plot_number','==', plot)
      .orderBy('createdAt','desc')
      .limit(1)
      .get();

    let data = null;
    if (!snap.empty) data = snap.docs[0].data();
    else data = await fallbackQuery();

    if (!data) {
      clearFormFields(); // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      return;
    }
    fillFormFromDoc(data);
    toast('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
  } catch (err) {
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ index ‡πÉ‡∏´‡πâ fallback ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    if (err?.code === 'failed-precondition') {
      const data = await fallbackQuery();
      if (data) {
        fillFormFromDoc(data);
        toast('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      } else {
        clearFormFields(); // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      }
    } else {
      console.warn('prefill error:', err);
    }
  }
}

function fillFormFromDoc(d){
  // ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡πá‡∏≠‡∏Ñ
  const fieldsToLock = [
    'farmer_name', 'age', 'coffee_experience', 'planting_area', 'address', 
    'gps_coordinates', 'water_system', 'fertilizer_type', 'fertilizer_formula',
    'fertilizer_frequency', 'fertilizer_amount', 'soil_problems', 'yield_problems',
    'internet_access', 'yield_per_tree', 'cupping_experience', 'fertilizer_cost',
    'labor_cost', 'other_costs'
  ];

  setVal('farmer_name', d.farmer_name);
  setVal('age', d.age);
  setVal('coffee_experience', d.coffee_experience);
  setVal('planting_area', d.planting_area);
  setVal('address', d.address);
  setVal('gps_coordinates', d.gps_coordinates);
  setVal('water_system', d.water_system);
  setVal('fertilizer_type', d.fertilizer_type);
  setVal('fertilizer_formula', d.fertilizer_formula);
  setVal('fertilizer_frequency', d.fertilizer_frequency);
  setVal('fertilizer_amount', d.fertilizer_amount);
  setVal('soil_problems', d.soil_problems);
  setVal('yield_problems', d.yield_problems);
  setVal('internet_access', d.internet_access);
  setVal('yield_per_tree', d.yield_per_tree);
  setVal('cupping_experience', d.cupping_experience);
  setVal('fertilizer_cost', d.fertilizer_cost);
  setVal('labor_cost', d.labor_cost);
  setVal('other_costs', d.other_costs);

  // ‡∏•‡πá‡∏≠‡∏Ñ‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ
  fieldsToLock.forEach(fieldId => {
    const element = document.getElementById(fieldId);
    if (element) {
      element.disabled = true;
      element.parentElement.classList.add('locked-field');
    }
  });

  // ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠ GPS ‡∏ñ‡∏π‡∏Å‡∏•‡πá‡∏≠‡∏Ñ
  const mapBtn = document.getElementById('mapBtn');
  if (mapBtn) {
    mapBtn.style.display = 'none';
  }
}

function unlockAllFields() {
  const fieldsToUnlock = [
    'farmer_name', 'age', 'coffee_experience', 'planting_area', 'address', 
    'gps_coordinates', 'water_system', 'fertilizer_type', 'fertilizer_formula',
    'fertilizer_frequency', 'fertilizer_amount', 'soil_problems', 'yield_problems',
    'internet_access', 'yield_per_tree', 'cupping_experience', 'fertilizer_cost',
    'labor_cost', 'other_costs'
  ];

  fieldsToUnlock.forEach(fieldId => {
    const element = document.getElementById(fieldId);
    if (element) {
      element.disabled = false;
      element.parentElement.classList.remove('locked-field');
    }
  });
}

function clearFormFields() {
  const fieldsToClear = [
    'farmer_name', 'age', 'coffee_experience', 'planting_area', 'address', 
    'gps_coordinates', 'water_system', 'fertilizer_type', 'fertilizer_formula',
    'fertilizer_frequency', 'fertilizer_amount', 'soil_problems', 'yield_problems',
    'internet_access', 'yield_per_tree', 'cupping_experience', 'fertilizer_cost',
    'labor_cost', 'other_costs'
  ];

  // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ
  fieldsToClear.forEach(fieldId => {
    const element = document.getElementById(fieldId);
    if (element) {
      element.value = '';
      element.disabled = false;
      element.parentElement.classList.remove('locked-field');
    }
  });

  // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
  const mapBtn = document.getElementById('mapBtn');
  if (mapBtn) {
    mapBtn.style.display = 'inline-block';
  }
}

// hook: ‡πÉ‡∏´‡πâ prefill ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏õ‡∏•‡∏á
document.addEventListener('DOMContentLoaded', () => {
  const mountainSelect = document.getElementById('mountain');
  const plotSelect = document.getElementById('plot_number');

  mountainSelect.addEventListener('change', function() {
    clearFormFields(); // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏î‡∏≠‡∏¢
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á options ‡∏ï‡∏≤‡∏°‡∏î‡∏≠‡∏¢ (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
    // ‡∏´‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ plot ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πá‡∏•‡∏≠‡∏á prefill ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    setTimeout(prefillFarmerSection, 0);
  });

  plotSelect.addEventListener('change', prefillFarmerSection);
});

// =========================
// üîí ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Input Number ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Å‡∏•‡∏¥‡πâ‡∏á‡πÄ‡∏°‡∏≤‡∏™‡πå
// =========================

// ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤ input number ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏•‡∏π‡∏Å‡∏Å‡∏•‡∏¥‡πâ‡∏á‡πÄ‡∏°‡∏≤‡∏™‡πå
function preventNumberInputScroll() {
  const numberInputs = document.querySelectorAll('input[type="number"]');
  
  numberInputs.forEach(function(input) {
    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ input ‡∏ñ‡∏π‡∏Å focus
    input.addEventListener('wheel', function(e) {
      // ‡∏ñ‡πâ‡∏≤ input ‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏π‡∏Å focus ‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤
      if (document.activeElement === this) {
        e.preventDefault();
      }
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ focus ‡∏Å‡πá‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥
    });
  });
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à
document.addEventListener('DOMContentLoaded', preventNumberInputScroll);
